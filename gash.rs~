use std::{io, run};
use std::str;
use std::path;





fn main() {
	static CMD_PROMPT: &'static str = "gash > ";
	let mut command_history = ~"";
	loop{
		print(CMD_PROMPT);
		let line = io::stdin().read_line();
		debug!(fmt!("line: %?", line));
		let mut argv: ~[~str] =  line.split_iter(' ').filter(|&x| x != "").transform(|x| x.to_owned()).collect();
		debug!(fmt!("argv %?", argv));

		if argv.len() > 0 {
			let program = argv.remove(0);
			debug!(fmt!("trying to launch: %?", program));
			match program {

				~"exit" => {
					return; 
				}

				~"cd" => {
					if argv.len() < 1 {
						//no args to cd change to home dir
						let home_directory: Path = std::os::homedir().unwrap();
						std::os::change_dir(~home_directory);
						let current_directory = std::os::getcwd();
						println(fmt!("%?", current_directory));
						//logging
						command_history.push_str("cd");
						command_history.push_str("\n");
					}
					else{
						//change to specified dir
						std::os::change_dir(~std::path::Path(argv[0]));
						let current_directory = std::os::getcwd();
						println(fmt!("%?", current_directory));
						//logging
						command_history.push_str("cd "+argv[0]); 
						command_history.push_str("\n");
					}
				}

				~"history" => {
					//print out history
					println(fmt!("%s", command_history));
					//history logging
					command_history.push_str("history");
					command_history.push_str("\n");
				}
				~">" => {
					let fileName = argv[0];
					let flags = ~[io::Create, io::Truncate];
					let file = Path(fileName);
					match io::file_writer(&file, flags){
						Ok(writer) => {
							writer.write_line(fmt!("%s","")); 
						}
						Err(err) => {
							fail!(err)
						}
					}
					command_history.push_str("> " + fileName);
					command_history.push_str("\n");	
				}
				~"cowsay" => {
					println(" -------------------------------");
					println("/                               \\");
					let mut message = ~"";
					while argv.len() > 0 {
						message.push_str(" ");
						message.push_str(argv.remove(0));
					}
					command_history.push_str("cowsay ");
					command_history.push_str(message);
					command_history.push_str("\n");	
					println(message);
					println("\\                               /");
					println(" -------------------------------");
					println("     \\    ^____^");
					println("      \\    (oo)\\______________");
					println("           (__)\\              )\\/\\");
					println("                ||-----------w |");
					println("                ||            ||");
					
					
					
				}
				~"add" => {
					let mut total: float = 0.0;
					while argv.len() > 0 {
						let temp: float = std::float::from_str(argv.remove(0)).unwrap();
						total+=temp;
						
					}
					println(fmt!("%f", total));
				}
				~"divide" => {
					let mut total: float = std::float::from_str(argv.remove(0)).unwrap();
					while argv.len() > 0 {
						let temp: float = std::float::from_str(argv.remove(0)).unwrap();
						total = total / temp;
						
					}
					println(fmt!("%f", total));
				}
				~"subtract" => {
					let mut total: float = std::float::from_str(argv.remove(0)).unwrap();
					while argv.len() > 0 {
						let temp: float = std::float::from_str(argv.remove(0)).unwrap();
						total = total - temp;
						
					}
					println(fmt!("%f", total));
				}
				~"multiply" => {
					let mut total: float = std::float::from_str(argv.remove(0)).unwrap();
					while argv.len() > 0 {
						let temp: float = std::float::from_str(argv.remove(0)).unwrap();
						total = total * temp;
						
					}
					println(fmt!("%f", total));
				}
				_ => {
					//history logging, we need to record all the arguments too.
					command_history.push_str(program);
					let mut argCount = 0;
					while argCount<argv.len(){
						command_history.push_str(" ");
						command_history.push_str(argv[argCount]);
						argCount+=1;
					}
					command_history.push_str("\n");
					

					//Background process
					if(argv.contains(&~"&")){
						//Remove & from args so the args are correct
						let lastIndex = argv.len()-1;
						argv.remove(lastIndex);
						//Create non mutable reference to argv
						let argv = argv;
						
						//launch background process with a new schedule
						do std::task::spawn_sched(std::task::SingleThreaded){
							execute_process( copy program, copy argv);
							
						}
						
					}
					//Foreground process
					else{
						execute_process(program, argv);
					}

				}
			}//end match
		}//end if argv.len()>0
	}//end gash > loop
}//end main

fn execute_process(program: ~str, mut argv: ~[~str]) -> (){
	//check for pipes or io redirect, assuming we have only one
	if(argv.contains(&~">>") || argv.contains(&~">") || argv.contains(&~"<") || argv.contains(&~"|") ){
		//std output
		if(argv.contains(&~">") || argv.contains(&~">>")){
			//set flags for append or truncate	
			let mut flags;
			if(argv.contains(&~">>")){
				flags = ~[io::Create, io::Append];
			}
			else{
				flags = ~[io::Create, io::Truncate];
			}
			//remove args
			let lastIndex = argv.len()-1;
			let fileName = &argv.remove(lastIndex); //remove file name
			argv.remove(lastIndex-1); //remove >

			//store output
			let process_result = run::process_output(program, argv);
			let results = str::from_bytes(process_result.output);
			let file = Path(*fileName);
			match io::file_writer(&file, flags){
				Ok(writer) => {
					writer.write_line(fmt!("%s", results)); 
				}
				Err(err) => {
					fail!(err)
				}
			}
		}
		//std input
		else if(argv.contains(&~"<")){
			//remove args
			let lastIndex = argv.len()-1;
			let fileName = &argv.remove(lastIndex);//remove file name
			argv.remove(lastIndex-1); //remove <	

			//create process and writer
			let mut process = run::Process::new(program, argv, run::ProcessOptions{
				env: None,
				dir: None,
				in_fd: None,
				out_fd: None,
				err_fd: None});
			let processWriter = process.input();
		
			//get input
			let fileReader: Result<@Reader, ~str> = std::io::file_reader(~path::Path(fileName.to_str()));
			match fileReader {
				Ok(reader) => {
					//write input to process
					processWriter.write(reader.read_whole_stream());
				}
				Err(msg) => {
					println(fmt!("Error reading file: %?",msg));
				}
			}
			//print out results
			let out = process.finish_with_output();
			println(fmt!("\n%s", str::from_bytes(out.output)));
		}
		//piping
		else if(argv.contains(&~"|")){
			//init vars
			let mut args:~[~[~str]] = ~[~[]]; //vector of vectors
			let mut programStart = ~"";
			let mut programNext = ~"";
			let mut argStart:~[~str] = ~[];
			let mut argNext:~[~str] = ~[];
			let mut process_next = run::Process::new("echo", ~[~"This is an error"], run::ProcessOptions{
					env: None,
					dir: None,
					in_fd: None,
					out_fd: None,
					err_fd: None});			

			//Seperate all programs/arguments into vector of vectors
			let mut progCounter = 0;
			args[progCounter].push(program); //push first program name
			while (argv.len() > 0) {
				if(argv[0].equals(&~"|")){
					args.push(~[]); //push a new vector for a new process
					argv.remove(0); //remove |
					progCounter+=1;
				}
				args[progCounter].push(argv.remove(0)); //push program name or arguments
			}
			
			//run chaining piping
			let mut currentProg = 0;

			//init first program and arguments
			programStart = args[currentProg].remove(0);
			while (args[currentProg].len()>0){
				argStart.push(args[currentProg].remove(0));
			}
			let mut process_last_result = run::process_output(programStart, argStart); //run first process	

			//chaining through pipes
			currentProg +=1;
			while(currentProg <= progCounter){
				//init next process
				programNext = args[currentProg].remove(0);
				while(args[currentProg].len() > 0){
					argNext.push(args[currentProg].remove(0));
				}
				//create process for the next process and create a writer so that the recent process can funnel input
				process_next = run::Process::new(programNext, argv, run::ProcessOptions{
					env: None,
					dir: None,
					in_fd: None,
					out_fd: None,
					err_fd: None});
				let processWriter = process_next.input(); //get input writer for next process
				processWriter.write(process_last_result.output); //write input from last process to next process				
				process_last_result = process_next.finish_with_output(); //get output from next process
				currentProg+=1;
			}
			
			//print out final input
			println(fmt!("\n%s", str::from_bytes(process_last_result.output)));
		}
		
	}	
	
	//no io redirect/piping						
	else{
		std::run::process_status(program, argv);
		
	}
}
